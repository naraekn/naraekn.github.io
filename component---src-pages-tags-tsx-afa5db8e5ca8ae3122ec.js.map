{"version":3,"sources":["webpack:///./src/components/PostList/index.tsx","webpack:///./src/pages/tags.tsx"],"names":["PostList","props","posts","useState","showCnt","setShowCnt","currentPostList","setCurrentPostList","sortedPosts","useMemo","sort","a","b","af","node","frontmatter","bf","aDate","Date","update","includes","date","bDate","throttleScrollHandler","useCallback","throttle","window","outerHeight","document","querySelector","getBoundingClientRect","bottom","prev","length","expendPostList","list","mapToList","map","post","excerpt","fields","slug","title","tags","Number","split","mapTag","tag","key","className","to","useEffect","slice","addEventListener","removeEventListener","pageQuery","Tags","group","data","allMarkdownRemark","largeCount","setLargeCount","targetTag","setTargetTag","x","fieldValue","toLocaleLowerCase","y","tagList","g","fontSize","style","Math","round","totalCount","toString","opacity","fontWeight","onClick","href","getPostList","filter","edges","location","hash","large","id"],"mappings":"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","file":"component---src-pages-tags-tsx-afa5db8e5ca8ae3122ec.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as React from 'react';\nimport { useEffect, useState, useCallback, useMemo } from 'react';\nimport { Link } from 'gatsby';\nimport { throttle } from 'lodash';\n\nimport './postList.scss';\n\ninterface PostListProps {\n  posts: any[];\n}\n\nconst PostList = (props: PostListProps) => {\n  const { posts } = props;\n  const [showCnt, setShowCnt] = useState(10);\n  const [currentPostList, setCurrentPostList] = useState<JSX.Element[]>([]);\n  const sortedPosts = useMemo(() => {\n    posts.sort((a: any, b: any) => {\n      const af = a.node.frontmatter;\n      const bf = b.node.frontmatter;\n\n      const aDate = new Date(af.update.includes('0001') ? af.date : af.update);\n      const bDate = new Date(bf.update.includes('0001') ? bf.date : bf.update);\n\n      if (aDate < bDate) return 1;\n      if (aDate > bDate) return -1;\n      return 0;\n    });\n    return posts;\n  }, [posts]);\n\n  const throttleScrollHandler = useCallback(\n    throttle(() => {\n      if (\n        window.outerHeight > (document.querySelector('.post-list') as HTMLDivElement).getBoundingClientRect().bottom\n      ) {\n        setShowCnt((prev: number) => {\n          if (prev >= sortedPosts.length) return prev;\n          return prev + 10;\n        });\n      }\n    }, 250),\n    [sortedPosts]\n  );\n\n  const expendPostList = useCallback((list: any) => {\n    const mapToList = list.map((post: any) => {\n      const { node } = post;\n      const { excerpt, fields, frontmatter } = node;\n      const { slug } = fields;\n      const { date, title, tags } = frontmatter;\n      let update = frontmatter.update;\n      if (Number(update.split(',')[1]) === 1) update = null;\n\n      const mapTag = tags.map((tag: string) => {\n        if (tag === 'undefined') return;\n\n        return (\n          <div key={`${slug}-${tag}`} className=\"tag\">\n            <span>\n              <Link to={`/tags#${tag}`}>{`#${tag}`}</Link>\n            </span>\n          </div>\n        );\n      });\n\n      return (\n        <li key={slug} className={`post`}>\n          <article>\n            <h2 className=\"title\">\n              <Link to={slug}>{title}</Link>\n            </h2>\n            <div className=\"info\">\n              <div className=\"date-wrap\">\n                <span className=\"date\">{date}</span>\n                {update ? <span className=\"update\">&nbsp;{`(Updated: ${update})`}</span> : null}\n              </div>\n              {tags.length && tags[0] !== 'undefined' ? <span className=\"info-dot\">Â·</span> : null}\n              <ul className=\"tag-list\">{mapTag}</ul>\n            </div>\n            <span className=\"excerpt\">\n              <Link to={slug}>{excerpt}</Link>\n            </span>\n          </article>\n        </li>\n      );\n    });\n\n    setCurrentPostList((prev: JSX.Element[]) => {\n      return [...prev, ...mapToList];\n    });\n  }, []);\n\n  useEffect(() => {\n    if (showCnt > 0 && showCnt !== 10) expendPostList(sortedPosts.slice(currentPostList.length, showCnt));\n  }, [showCnt]);\n\n  useEffect(() => {\n    if (currentPostList.length) setCurrentPostList([]);\n\n    setShowCnt((prev: number) => {\n      if (prev === 10) expendPostList(sortedPosts.slice(0, 10));\n      return 10;\n    });\n\n    window.addEventListener('scroll', throttleScrollHandler);\n\n    return () => {\n      window.removeEventListener('scroll', throttleScrollHandler);\n    };\n  }, [sortedPosts]);\n\n  return (\n    <div className=\"post-list\">\n      <ul>{currentPostList}</ul>\n    </div>\n  );\n};\n\nexport default PostList;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as React from 'react';\nimport { useEffect, useState, useCallback } from 'react';\nimport { graphql } from 'gatsby';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/seo';\nimport './styles/tags.scss';\nimport PostList from '../components/PostList';\n\ninterface TagsPageProps {\n  data: any;\n}\n\nconst Tags = (props: TagsPageProps) => {\n  const { data } = props;\n  const { group } = data.allMarkdownRemark;\n\n  const [largeCount, setLargeCount] = useState(0);\n  const [targetTag, setTargetTag] = useState<string | undefined>();\n  const [currentPostList, setCurrentPostList] = useState([]);\n\n  interface groupItem {\n    fieldValue: string;\n    totalCount: number;\n  }\n\n  group.sort((a: groupItem, b: groupItem) => {\n    const x = a.fieldValue.toLocaleLowerCase();\n    const y = b.fieldValue.toLocaleLowerCase();\n\n    if (x < y) return -1;\n    if (y < x) return 1;\n    return 0;\n  });\n\n  const tagList = group.map((g: groupItem) => {\n    const getFontSize = () => {\n      let fontSize = Math.round(50 / (largeCount / g.totalCount)).toString();\n      if (fontSize.length <= 1) fontSize = `0${fontSize}`;\n      return `${Number(fontSize) / 100 + 0.9}rem`;\n    };\n\n    return (\n      <li key={g.fieldValue}>\n        <span\n          className=\"tag-text\"\n          style={{\n            fontSize: g.fieldValue !== 'undefined' ? getFontSize() : '0.9rem',\n            opacity: g.fieldValue === targetTag ? '0.9' : '0.5',\n            fontWeight: g.fieldValue === targetTag ? 'bold' : 'normal',\n          }}\n          onClick={() => {\n            setTargetTag(g.fieldValue);\n          }}\n        >\n          <a href={`#${g.fieldValue}`}>{g.fieldValue}</a>\n        </span>\n      </li>\n    );\n  });\n\n  const getPostList = useCallback(() => {\n    if (group.filter((g: groupItem) => g.fieldValue === targetTag).length) {\n      return group.filter((g: groupItem) => g.fieldValue === targetTag)[0].edges;\n    }\n    if (group.filter((g: groupItem) => g.fieldValue === 'undefined').length) {\n      return group.filter((g: groupItem) => g.fieldValue === 'undefined')[0].edges;\n    }\n    return [];\n  }, [targetTag]);\n\n  useEffect(() => {\n    setTargetTag(location?.hash ? location.hash.split('#')[1] : 'undefined');\n\n    let large = 0;\n    for (const g of group) {\n      if (g.fieldValue !== 'undefined' && g.totalCount > large) large = g.totalCount;\n    }\n    setLargeCount(large);\n  }, []);\n\n  useEffect(() => {\n    if (targetTag) setCurrentPostList(getPostList());\n  }, [targetTag]);\n\n  return (\n    <Layout>\n      <SEO title=\"Tags\" />\n      <div id=\"tags\">\n        <div className=\"tag-list-wrap\">\n          <ul>{tagList}</ul>\n        </div>\n\n        <PostList posts={currentPostList.length ? currentPostList : []} />\n      </div>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n        edges {\n          node {\n            excerpt(truncate: true, format: PLAIN)\n            fields {\n              slug\n            }\n            frontmatter {\n              date(formatString: \"MMM DD, YYYY\")\n              update(formatString: \"MMM DD, YYYY\")\n              title\n              tags\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Tags;\n"],"sourceRoot":""}